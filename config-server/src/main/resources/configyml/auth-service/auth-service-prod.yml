# config-server/src/main/resources/config/auth-service-prod.yml
server:
  port: ${SERVER_PORT}
  shutdown: graceful

spring:
  mvc:
    log-request-details: true
  lifecycle:
    timeout-per-shutdown-phase: 30s
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

#  cloud:
#    openfeign:
#      clients:
#        mail-service:
#          url: ${MAIL_SERVICE_URL:http://mail-service:9020}
#        user-service:
#          url: ${USER_SERVICE_URL:http://user-service:9010}

  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
#    hikari:
#      maximum-pool-size: ${DB_POOL_SIZE:20}
#      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
#      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
#      max-lifetime: ${DB_MAX_LIFETIME:1800000}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
#      timeout: ${REDIS_TIMEOUT:2000ms}

  # Production specific settings
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER}
    registryFetchIntervalSeconds: 30
    connectTimeoutSeconds: 5
    retryable: true
  instance:
    instance-id: ${spring.application.name}:${server.port}
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30

google:
  recaptcha:
    secret: ${RECAPTCHA_SECRET_KEY}

services:
  url:
    auth: ${AUTH_SERVICE_URL}
    mail: ${MAIL_SERVICE_URL}
    user: ${USER_SERVICE_URL}
    contacts: ${CONTACTS_SERVICE_URL}
    chat: ${CHAT_SERVICE_URL}
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      expiration: ${JWT_EXPIRATION}
      refresh-token:
        expiration: ${JWT_REFRESH_EXPIRATION}

# Production logging
logging:
  level:
    root: INFO
    com.vky: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.springframework.data.redis: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level - %msg%n"

#    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
##  file:
##    name: /var/log/auth-service.log


management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
    prometheus:
      enabled: true