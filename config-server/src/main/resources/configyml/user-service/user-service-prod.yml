# config-server/src/main/resources/config/user-service-prod.yml
server:
  port: ${SERVER_PORT}
  shutdown: graceful

spring:
  mvc:
    log-request-details: true
  lifecycle:
    timeout-per-shutdown-phase: 30s
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

#  cloud:
#    openfeign:
#      clients:
#        auth-service:
#          url: ${AUTH_SERVICE_URL:http://auth-service:9000}
#        mail-service:
#          url: ${MAIL_SERVICE_URL:http://mail-service:9020}
#        contacts-service:
#          url: ${CONTACTS_SERVICE_URL:http://contacts-service:9030}
#        chat-service:
#          url: ${CHAT_SERVICE_URL:http://chat-service:9040}
#      httpclient:
#        connection-timeout: ${FEIGN_CONNECTION_TIMEOUT:5000}
#        connection-timer-repeat: ${FEIGN_CONNECTION_TIMER_REPEAT:3000}

  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
#    hikari:
#      maximum-pool-size: ${DB_POOL_SIZE:25}
#      minimum-idle: ${DB_MIN_IDLE:5}
#      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
#      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
#      max-lifetime: ${DB_MAX_LIFETIME:1800000}
#      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
#      password: ${REDIS_PASSWORD}
#      timeout: ${REDIS_TIMEOUT:3000ms}
#      jedis:
#        pool:
#          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
#          max-idle: ${REDIS_POOL_MAX_IDLE:8}
#          min-idle: ${REDIS_POOL_MIN_IDLE:0}

  # Production specific settings
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
#        jdbc:
#          batch_size: ${HIBERNATE_BATCH_SIZE:20}
#        order_inserts: true
#        order_updates: true

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER}
    registryFetchIntervalSeconds: 30
    connectTimeoutSeconds: 5
    retryable: true
  instance:
    instance-id: ${spring.application.name}:${server.port}
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
# Production URLs - Service discovery kullanarak
services:
  url:
    auth: ${AUTH_SERVICE_URL}
    mail: ${MAIL_SERVICE_URL}
    user: ${USER_SERVICE_URL}
    contacts: ${CONTACTS_SERVICE_URL}
    chat: ${CHAT_SERVICE_URL}

# Production logging
logging:
  level:
    root: INFO
    com.vky: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level - %msg%n"
#    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
#  file:
#    name: /var/log/user-service.log
#    max-size: 100MB
#    max-history: 30

# Production health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
    prometheus:
      enabled: true


cloudinary:
  cloud:
    name: ${CLOUDINARY_CLOUD_NAME}
  api:
    key: ${CLOUDINARY_API_KEY}
    secret: ${CLOUDINARY_API_SECRET}
# Production circuit breaker
#resilience4j:
#  circuitbreaker:
#    instances:
#      auth-service:
#        slidingWindowSize: 20
#        failureRateThreshold: 30
#        waitDurationInOpenState: 60s
#        minimumNumberOfCalls: 10
#      mail-service:
#        slidingWindowSize: 15
#        failureRateThreshold: 40
#        waitDurationInOpenState: 45s
#        minimumNumberOfCalls: 8